--- Include/apprx.h.orig	2013-05-07 18:02:39.000000000 +0100
+++ Include/apprx.h	2013-05-07 15:26:14.000000000 +0100
@@ -8,6 +8,19 @@
     this software; if not, see AHMED's internet site.
 */
 
+/*
+    This file has been modified by the authors of BEM++.
+
+    Summary of changes:
+
+    - 17/11/2012: added parameters c1 and c2 to invocations of routines
+      ACA_row_step() and ACA_col_step().
+    - 13/02/2013: made routine check_error() work in single precision.
+    - 13/02/2013: introduced routine apprx_unsym_generic() that can call
+      a user-defined ACA routine. The original ACA routine from AHMED (modulo
+      other BEM++ patches to AHMED) is still available as apprx_unsym().
+    - 7/05/2013: replaced bemblcluster with bbxbemblcluster.
+*/
 
 #ifndef APPRX_H
 #define APPRX_H
@@ -17,7 +30,7 @@
 #include <fstream>
 #include "cmplx.h"
 #include "blas.h"
-#include "bemblcluster.h"
+#include "bbxbemblcluster.h"
 #include "ACA.h"
 
 #ifdef CHECK_ACA_ERROR
@@ -25,7 +38,7 @@
 double ACA_error_max = 0.0;
 
 template<class T,class T1,class T2, class MATGEN_T> static
-void check_error(MATGEN_T& MatGen, bemblcluster<T1,T2>* bl, double eps,
+void check_error(MATGEN_T& MatGen, bbxbemblcluster<T1,T2>* bl, double eps,
 		 mblock<T>* mbl, unsigned i0)
 {
   std::cout << "checking ACA error ... " << std::flush;
@@ -85,7 +98,7 @@
 
 
 template<class T,class T1, class MATGEN_T>
-void apprx_sym(MATGEN_T& MatGen, mblock<T>* &mbl, bemblcluster<T1,T1>* bl,
+void apprx_sym(MATGEN_T& MatGen, mblock<T>* &mbl, bbxbemblcluster<T1,T1>* bl,
 	       double eps, unsigned rankmax, const bool& cmplx_sym)
 {
   unsigned n1 = bl->getn1(), n2 = bl->getn2();
@@ -140,7 +153,7 @@
         bool (*aca_routine)(MATGEN_T&, unsigned, unsigned, unsigned, unsigned,
                             double, unsigned, unsigned, unsigned&, T*&, T*&,
                             const cluster*, const cluster*),
-        MATGEN_T& MatGen, mblock<T>* &mbl, bemblcluster<T1,T2>* bl,
+        MATGEN_T& MatGen, mblock<T>* &mbl, bbxbemblcluster<T1,T2>* bl,
                  double eps, unsigned rankmax)
 {
   unsigned n1 = bl->getn1(), n2 = bl->getn2();
@@ -179,7 +192,7 @@
 }
 
 template<class T,class T1,class T2, class MATGEN_T>
-void apprx_unsym(MATGEN_T& MatGen, mblock<T>* &mbl, bemblcluster<T1,T2>* bl,
+void apprx_unsym(MATGEN_T& MatGen, mblock<T>* &mbl, bbxbemblcluster<T1,T2>* bl,
                  double eps, unsigned rankmax)
 {
     apprx_unsym_generic(&ACA<T, MATGEN_T>, MatGen, mbl, bl, eps, rankmax);
@@ -187,7 +200,7 @@
 
 // matrix generation procedure for unsymmetric matrices
 template<class T,class T1,class T2, class MATGEN_T>
-void apprxSVD_unsym(MATGEN_T& MatGen, mblock<T>* &mbl, bemblcluster<T1,T2>* bl,
+void apprxSVD_unsym(MATGEN_T& MatGen, mblock<T>* &mbl, bbxbemblcluster<T1,T2>* bl,
                     double eps, unsigned rankmax)
 {
   unsigned n1 = bl->getn1(), n2 = bl->getn2();
