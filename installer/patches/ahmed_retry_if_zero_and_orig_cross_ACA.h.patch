--- ACA.h.orig	2013-03-09 14:33:33.000000000 +0000
+++ ACA.h	2013-03-09 16:49:35.000000000 +0000
@@ -20,6 +20,19 @@
 #include "bemcluster.h"
 #include "cmplx.h"
 
+// The values are chosen for compatibility with the original AHMED
+// code, where ACA_row_step and ACA_col_step returned a boolean value
+// equal to false if there were no nonzero rows/columns left, and
+// true if a nonzero row was found.
+enum ACA_status
+{
+    // There are no nonzero rows or columns left
+    ACA_STATUS_REMAINDER_IS_ZERO = 0,
+    // Found a nonzero row
+    ACA_STATUS_SUCCESS = 1,
+    // Specified row or column was deemed to be zero
+    ACA_STATUS_EARLY_EXIT = 2
+};
 
 // on entry: eps contains wanted accuracy, k max rank
 //           U, V of size m*(k+1), n*(k+1)
@@ -42,12 +55,25 @@
 //         that have been applied to the i-th row
 
 
-// returns false if no large enough pivot can be found
+// optional arguments: 
+// - retry_if_zero: controls behaviour if the specified row i0 is found to
+//   contain only very small elements. If retry_if_zero is set, successive rows
+//   are tried until one with a sufficiently large element is found or no rows
+//   remain. Otherwise the function returns ACA_STATUS_EARLY_EXIT.
+// - orig_row, orig_col: arrays which receive copies of the row and column
+//   of the original matrix used in the current step. Can be set to NULL,
+//   in which case these vectors are not copied.
 template<class T, class MATGEN_T> static
-bool ACA_row_step(MATGEN_T& MatGen, unsigned b1, unsigned n1, unsigned b2, unsigned n2,
-		  unsigned& klast, unsigned& i0, unsigned k, unsigned& no, int* Z, int* S,
-		  T* U, T* V, typename num_traits<T>::abs_type& nrmlsk2, typename num_traits<T>::abs_type scale,
-                  const cluster* c1, const cluster* c2)
+ACA_status ACA_row_step(MATGEN_T& MatGen, unsigned b1, unsigned n1,
+                        unsigned b2, unsigned n2,
+                        unsigned& klast, unsigned& i0, 
+                        unsigned k, unsigned& no, int* Z, int* S,
+                        T* U, T* V, 
+                        typename num_traits<T>::abs_type& nrmlsk2, 
+                        typename num_traits<T>::abs_type scale,
+                        const cluster* c1, const cluster* c2,
+                        bool retry_if_zero = true,
+                        T* orig_row = 0, T* orig_col = 0)
 {
   typedef typename num_traits<T>::abs_type abs_T;
   unsigned l, j0;
@@ -57,6 +83,9 @@
   // find next non-zero row, start with i0
   do {
     MatGen.cmpbl(b1+i0, 1, b2, n2, pv, c1, c2);
+    if (orig_row)
+        blas::copy(n2, pv, orig_row);
+
     blas::conj(n2, pv);
 
     // subtract previously generated outer products from this row
@@ -81,14 +110,17 @@
     if (absmax < 1e-14 * scale) {
       //      std::cout << "pivot too small " << no+1 << ' ' << n1 << std::endl;
       Z[i0] = -1;
-      if (++no<n1) i0 = nexti(n1, Z, i0);
+      if (retry_if_zero) {
+          if (++no<n1) i0 = nexti(n1, Z, i0);
+      } else
+          return ACA_STATUS_EARLY_EXIT;
     }
   } while (absmax < 1e-14 * scale && no<n1);
 
-  if (absmax < 1e-14 * scale) return false;    // remainder is zero, return
+  if (absmax < 1e-14 * scale) return ACA_STATUS_REMAINDER_IS_ZERO;    // remainder is zero, return
 
   // else: we have found a reasonable pivot (i0,j0)
-  //  std::cout << "i0=" << i0 << ", j0=" << j0 << std::endl;
+  // std::cout << "row_step: i0=" << i0 << ", j0=" << j0 << std::endl;
   abs_T sqrtpiv = sqrt(absmax);
   nrmv2 = 0.0;
   T sca = sqrtpiv/pv[j0];        // scale \tilde{v}_{k+1} -> v_{k+1}
@@ -102,6 +134,8 @@
   }
 
   MatGen.cmpbl(b1, n1, b2+j0, 1, pu, c1, c2);
+  if (orig_col)
+      blas::copy(n1, pu, orig_col);
 
   for (l=0; l<k; ++l) {
     const T d = nconj(V[l*n2 + j0]);
@@ -128,16 +162,21 @@
   }
 
   nrmlsk2 = nrmu2 * nrmv2;
-  return true;
+  return ACA_STATUS_SUCCESS;
 }
 
 
-// returns true if successful
+// See ACA_row_step for a documentation of the optional arguments.
 template<class T, class MATGEN_T> static
-bool ACA_col_step(MATGEN_T& MatGen, unsigned b1, unsigned n1, unsigned b2, unsigned n2,
-		  unsigned& j0, unsigned k, unsigned& no, int* Z, int* S, T* U, T* V,
-		  typename num_traits<T>::abs_type& nrmlsk2, typename num_traits<T>::abs_type scale,
-                  const cluster* c1, const cluster* c2)
+ACA_status ACA_col_step(MATGEN_T& MatGen, unsigned b1, unsigned n1,
+                        unsigned b2, unsigned n2,
+                        unsigned& j0, unsigned k, unsigned& no, 
+                        int* Z, int* S, T* U, T* V,
+                        typename num_traits<T>::abs_type& nrmlsk2, 
+                        typename num_traits<T>::abs_type scale,
+                        const cluster* c1, const cluster* c2,
+                        bool retry_if_zero = true,
+                        T* orig_row = 0, T* orig_col = 0)
 {
   typedef typename num_traits<T>::abs_type abs_T;
   abs_T nrmu2, nrmv2, absmax;
@@ -147,6 +186,8 @@
   // find next non-zero row, start with j0
   do {
     MatGen.cmpbl(b1, n1, b2+j0, 1, pu, c1, c2);
+    if (orig_col)
+        blas::copy(n1, pu, orig_col);
 
     for (l=0; l<k; ++l) {
       const T d = nconj(V[l*n2+j0]);
@@ -166,12 +207,16 @@
 
     if (absmax < 1e-14*scale) {
       S[j0] = -1;
-      if (++no<n2) j0 = nexti(n2, S, j0);
+      if (retry_if_zero) {
+          if (++no<n2) j0 = nexti(n2, S, j0);
+      } else 
+          return ACA_STATUS_EARLY_EXIT;    
     }
   } while (absmax < 1e-14*scale && no<n2);
 
-  if (absmax < 1e-14*scale) return false;
+  if (absmax < 1e-14*scale) return ACA_STATUS_REMAINDER_IS_ZERO;
 
+  // std::cout << "col_step: i0=" << i0 << ", j0=" << j0 << std::endl;
   abs_T sqrtpiv = sqrt(absmax);
   nrmu2 = 0.0;
   T sca = sqrtpiv/pu[i0];           // scale \tilde{u}_{k+1} -> u_{k+1}
@@ -185,6 +230,8 @@
   }
 
   MatGen.cmpbl(b1+i0, 1, b2, n2, pv, c1, c2);
+  if (orig_row)
+      blas::copy(n2, pv, orig_row);
   blas::conj(n2, pv);
 
   for (l=0; l<k; ++l) {
@@ -213,7 +260,7 @@
 
 
   nrmlsk2 = nrmu2 * nrmv2;
-  return true;
+  return ACA_STATUS_SUCCESS;
 }
 
 
