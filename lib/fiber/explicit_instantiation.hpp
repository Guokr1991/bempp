#ifndef fiber_explicit_instantiation_hpp
#define fiber_explicit_instantiation_hpp

#include "config_data_types.hpp"
#include <complex>

// Instantiation of classes templated on basis type

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_REAL(CLASSNAME) \
    template class CLASSNAME<float>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_REAL(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<float> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_REAL(CLASSNAME) \
    template class CLASSNAME<double>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_REAL(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<double> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_COMPLEX(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_SP_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_DP_COMPLEX(CLASSNAME)

// Instantiation of classes templated on kernel (or result) type

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_REAL(CLASSNAME) \
    template class CLASSNAME<float>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_REAL(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<float> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_REAL(CLASSNAME) \
    template class CLASSNAME<double>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_REAL(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<double> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_COMPLEX(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_SP_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL_DP_COMPLEX(CLASSNAME)

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_RESULT(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_KERNEL(CLASSNAME)

// Instantiation of classes templated on basis type and kernel (or result) type

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<float, float>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<float, std::complex<float> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<float>, std::complex<float> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_COMPLEX_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<double, double>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<double, std::complex<double> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<double>, std::complex<double> >
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_COMPLEX_COMPLEX(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_SP_COMPLEX_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_DP_COMPLEX_COMPLEX(CLASSNAME)

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_RESULT(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL(CLASSNAME)

// Instantiation of classes templated on basis type and kernel (or result) type,
// only for real types complex

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_SP(CLASSNAME) \
    template class CLASSNAME<float, float>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_SP(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_DP(CLASSNAME) \
    template class CLASSNAME<double, double>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_DP(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_SP(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY_DP(CLASSNAME)

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_RESULT_REAL_ONLY(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_AND_KERNEL_REAL_ONLY(CLASSNAME)

// Instantiation of classes templated on basis type, kernel type
// and geometry factory

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<float, float, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<float, std::complex<float>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<float>, std::complex<float>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_COMPLEX_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<double, double, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<double, std::complex<double>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<double>, std::complex<double>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_COMPLEX_COMPLEX(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_SP_COMPLEX_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_AND_GEOFACTORY_DP_COMPLEX_COMPLEX(CLASSNAME)

// Instantiation of classes templated on basis type, kernel type, result type
// and geometry factory

#if defined(ENABLE_SINGLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<float, float, float, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) || defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<float, float, std::complex<float>, Bempp::GeometryFactory>;
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<float, std::complex<float>, std::complex<float>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_COMPLEX_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_SINGLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<float>, std::complex<float>, std::complex<float>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_REAL(CLASSNAME) \
    template class CLASSNAME<double, double, double, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_REAL(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) || defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_COMPLEX(CLASSNAME) \
    template class CLASSNAME<double, double, std::complex<double>, Bempp::GeometryFactory>;
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_KERNELS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<double, std::complex<double>, std::complex<double>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_COMPLEX_COMPLEX(CLASSNAME)
#endif

#if defined(ENABLE_DOUBLE_PRECISION) && defined(ENABLE_COMPLEX_BASIS_FUNCTIONS)
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME) \
    template class CLASSNAME<std::complex<double>, std::complex<double>, std::complex<double>, Bempp::GeometryFactory>
#else
#  define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME)
#endif

#define FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY(CLASSNAME) \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_REAL_COMPLEX_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_SP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_REAL(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_REAL_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_REAL_COMPLEX_COMPLEX(CLASSNAME); \
    FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS_KERNEL_RESULT_AND_GEOFACTORY_DP_COMPLEX_COMPLEX_COMPLEX(CLASSNAME)

#endif // fiber_explicit_instantiation_hpp
