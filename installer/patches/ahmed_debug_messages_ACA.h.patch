--- ACA.h.zero-pu-pv	2013-02-13 16:48:46.000000000 +0000
+++ ACA.h.debug-messages	2013-02-13 16:53:01.000000000 +0000
@@ -79,7 +79,8 @@
 
     // pivot too small ? get new row
     if (absmax < 1e-14 * scale) {
-      //  std::cout << "pivot too small " << no+1 << ' ' << n1 << std::endl;
+      //  std::cout << "row-step pivot too small, i0=" << i0 << "; j0=" << j0
+      //            << "; sqrtpiv = " << sqrt(absmax) << std::endl;
       Z[i0] = -1;
       if (++no<n1) i0 = nexti(n1, Z, i0);
     }
@@ -88,8 +89,9 @@
   if (absmax < 1e-14 * scale) return false;    // remainder is zero, return
 
   // else: we have found a reasonable pivot (i0,j0)
-  // std::cout << "i0=" << i0 << ", j0=" << j0 << std::endl;
   abs_T sqrtpiv = sqrt(absmax);
+  // std::cout << "row step, i0=" << i0 << ", j0=" << j0 << ", sqrtpiv = "
+  //           << sqrt(absmax) << std::endl;
   nrmv2 = 0.0;
   T sca = sqrtpiv/pv[j0];        // scale \tilde{v}_{k+1} -> v_{k+1}
   for (l=0; l<n2; ++l) {
@@ -168,6 +170,8 @@
     }
 
     if (absmax < 1e-14*scale) {
+      // std::cout << "col-step pivot too small, i0=" << i0 << ", j0=" << j0
+      //           << ", sqrtpiv = " << sqrt(absmax) << std::endl;
       S[j0] = -1;
       if (++no<n2) j0 = nexti(n2, S, j0);
     }
@@ -175,6 +179,9 @@
 
   if (absmax < 1e-14*scale) return false;
 
+  // else: we have found a reasonable pivot (i0,j0)
+  // std::cout << "col step, i0=" << i0 << ", j0=" << j0 << ", sqrtpiv = "
+  //           << sqrt(absmax) << std::endl;
   abs_T sqrtpiv = sqrt(absmax);
   nrmu2 = 0.0;
   T sca = sqrtpiv/pu[i0];           // scale \tilde{u}_{k+1} -> u_{k+1}
@@ -274,6 +281,7 @@
       sum += blas::scpr(n1, U+l*n1, U+k*n1) * blas::scpr(n2, V+k*n2, V+l*n2);
 
     nrms2 += 2.0 * Re(sum) + nrmlsk2;
+    // std::cout << "nrmlsk2: " << nrmlsk2 << ", nrms2: " << nrms2 << std::endl;
 
     stpcrit = (nrmlsk2<eps*eps*nrms2);
     if (stpcrit && keps==-1) keps = klast+1;  // keps is the rank for acc. eps
@@ -331,6 +339,7 @@
     for (unsigned j=j0+1; j<n2; ++j)
       if (S[j]>=0 && S[j]<kmin) kmin = S[j0=j];
 
+    // std::cout << "columns: kmin = " << kmin << ", keps = " << keps << "\n";
     if (kmin>=keps) goto SUCC;   // if all were succ., stop iteration
 
     // else: use j0 as new pivot
@@ -346,15 +355,19 @@
   } while (no<n2 && k<kmax);
 
 NSUCC:
-  //std::cout << "NSUCC " << n1 << ", " << n2 << ", k=" << k << std::endl;
+  // std::cout << "NSUCC: " << n1 << ", " << n2 << ", k=" << k << ", kmax=" << kmax << std::endl;
   delete [] S;
   delete [] Z;
   return false;
 
 SUCC:
   double epsa = sqrt(nrmlsk2/nrms2);
-  // std::cout << "SUCC: " << epsa << ' ' << eps << std::endl;
-  if (epsa>=eps) goto NSUCC;
+  // std::cout << "SUCC: " << n1 << ", " << n2 << ", k=" << k << ", epsa=" << epsa << ", eps=" << eps << std::endl;
+
+  if (epsa >= eps)  {
+      // std::cout << "NSUCC: " << n1 << ", " << n2 << ", k=" << k << ", epsa=" << epsa << ", eps=" << eps << std::endl;
+      goto NSUCC;
+  }
 
   delete [] S;
   delete [] Z;
@@ -575,7 +588,12 @@
 #ifdef CHECK_ACA_ERROR
   std::cout << "SUCC: " << epsa << ' ' << eps << std::endl;
 #endif
-  if (epsa>=eps) goto NSUCC;
+  // if (epsa>=eps) goto NSUCC;
+  if (epsa>=eps) {
+      // std::cout << "Terminating prematurely, epsa = "
+      //           << epsa << " eps = " << eps << std::endl;
+      goto NSUCC;
+  }
 
   delete [] S;
   delete [] Z;
