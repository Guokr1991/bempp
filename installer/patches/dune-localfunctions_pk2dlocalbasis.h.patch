--- pk2dlocalbasis.hh.orig	2013-01-19 11:23:55.000000000 +0000
+++ pk2dlocalbasis.hh	2013-06-04 17:59:47.000000000 +0100
@@ -80,6 +80,7 @@
 					std::vector<typename Traits::JacobianType>& out) const      // return value
   {  
 	out.resize(N);
+        const D one = 1.;
 
     // specialization for k==0, not clear whether that is needed
     if (k==0) {
@@ -101,7 +102,7 @@
 			  R product=factor;
 			  for (unsigned int alpha=0; alpha<i; alpha++)
 				if (alpha==a)
-				  product *= 1.0/(pos[i]-pos[alpha]);
+				  product *= one/(pos[i]-pos[alpha]);
 				else
 				  product *= (x[0]-pos[alpha])/(pos[i]-pos[alpha]);
 			  for (unsigned int gamma=i+j+1; gamma<=k; gamma++) 
@@ -115,7 +116,7 @@
 				product *= (x[0]-pos[alpha])/(pos[i]-pos[alpha]);
 			  for (unsigned int gamma=i+j+1; gamma<=k; gamma++) 
 				if (gamma==c)
-				  product *= -1.0/(pos[gamma]-pos[i]-pos[j]);
+				  product *= -one/(pos[gamma]-pos[i]-pos[j]);
 				else
 				  product *= (pos[gamma]-x[0]-x[1])/(pos[gamma]-pos[i]-pos[j]);
 			  out[n][0][0] += product;
@@ -131,7 +132,7 @@
 			  R product=factor;
 			  for (unsigned int beta=0; beta<j; beta++)
 				if (beta==b)
-				  product *= 1.0/(pos[j]-pos[beta]);
+				  product *= one/(pos[j]-pos[beta]);
 				else
 				  product *= (x[1]-pos[beta])/(pos[j]-pos[beta]);
 			  for (unsigned int gamma=i+j+1; gamma<=k; gamma++) 
@@ -145,7 +146,7 @@
 				product *= (x[1]-pos[beta])/(pos[j]-pos[beta]);
 			  for (unsigned int gamma=i+j+1; gamma<=k; gamma++)
 				if (gamma==c)
-				  product *= -1.0/(pos[gamma]-pos[i]-pos[j]);
+				  product *= -one/(pos[gamma]-pos[i]-pos[j]);
 				else
 				  product *= (pos[gamma]-x[0]-x[1])/(pos[gamma]-pos[i]-pos[j]);
 			  out[n][0][1] += product;
