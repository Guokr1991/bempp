BEMPP is a novel open source HPC boundary element library. Coding 
started in October 2011.

If you want to compile the code please be aware that
we do not yet guarantee that every commit will compile.

The library has been tested under RedHat Enterprise 5,6 compatible systems, and 
Mac OS 10.7.

To build the library you need current versions of cmake (2.8 or better) and swig (2.0 or better).
For the Python Interface we mostly test with Enthought Python. But other distributions will
also work. However, Python visualization depends on Mayavi being available.

To build the library the following steps are necessary:

1.) Copy the file bempp_setup.cfg.template into another file (e.g. my_config.cfg)
and adapt the configuration variables. 

2.) Update the installation directory and other options as needed. You may wish to at least change
the following options:

    - Location of BLAS and Lapack. You can either use MKL or manually specify BLAS and Lapack libraries.
      If you use Enthought Python you can specify that the library uses the MKL libraries delivered
      with the Python distribution (highly recommended).
    - Enable AHMED for H-Matrix support. You need to specify "enable_ahmed=yes" and point the option
      "file_name" in the AHMED section to the location of the AHMED installer file. You can download the
      file from http://bebendorf.ins.uni-bonn.de/AHMED.html.

3.) Run the command

    python bempp_setup.py -c my_config.cfg

    This downloads all dependencies, generates a config file with automatically detected options and
    sets up the installation directory. Note that you need to have write access to the installation
    directory.

4.) Run the command

    python bempp_setup.py -i all my_config.cfg

    This installs the complete library.

    The library will be availabe at <prefix>/bempp/lib and the python module at <prefix>/bempp/python.
    Note that the generation of the Python module takes a very long time. Therefore, the installer 
    may seem to hang for a few minutes without doing anything.

5.) Have a look at the examples in the source directory under "examples" and "python/examples". The C++
    examples have been built and written to "<build_dir>/examples" after a succesful installation.

6.) If you have doxygen you can generate a class documentation by going into <build_dir> and run make doc
    to generate the html class documentation, which is then available under <build_dir>/doc/html/index.html. You are advised to use a recent version of Doxygen (e.g. 1.8.2), since older versions do not always parse C++ templates properly.

The library is not yet officially released. We are still working on the documentation and smaller
issues with the code. If you want to try it and run into problems please let us now.

The BEM++ Team




