[Main]

# Specify your system architecture. Allowed values: intel64 (for
# 64-bit systems), ia32 (for 32-bit systems), ia64 (for Intel Itanium
# systems). Example:

# architecture=intel64

# Specify the prefix of the installation directory.  BEM++ and its
# dependencies will be installed in prefix/bempp. Example:

# prefix=/opt

# Specify how many processes to use for building. Example:

# build_jobs=2

[Bempp]

# Specify the directory where BEM++ should be built. Example:

# build_dir=/home/myname/src/bempp-build

# Specify whether the installer should compile BEM++ straight after
# installing its dependencies. Normally this should be set to 'yes';
# set to 'no' only if you want to change some BEM++ compilation
# options manually. Example:

# build=yes

[MKL]

# If you want to use BLAS and LAPACK from Intel MKL, uncomment the
# following line

# enable_mkl=yes

# and specify where the MKL libraries can be found. 

# If the NumPy package in your Python distribution is linked against
# MKL (for example, you use Enthought Python), uncomment the following
# line to have the BEM++ installer use the same MKL libraries as
# NumPy.

# source=like_numpy

# Otherwise, specify manually the location of MKL. You have two options:

# (1) If you want to use an MKL distribution already installed on your disk,
#     uncomment the following line

# source=installed

#     and specify the directories containing the MKL libraries (such
#     as libmkl_core and libiomp5) in the following variable. You may
#     specify several directories at once by separating them with
#     semicolons. Example:

# dir=/opt/intel/mkl/lib/intel64;/opt/intel/lib/intel64

#     You can also customize the list of MKL libraries to link against
#     by editing the following variable. The default setting below
#     (-lmkl_rt) should work for MKL 10.3 or newer. In case of
#     problems use the Intel MKL Link Line Advisor
#     (http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor)
#     to find the setting appropriate for your configuration. You may
#     specify several libraries at once by separating them with
#     semicolons.

# lib=-lmkl_rt

# (2) If you have an archive file containing the MKL redistributables
#     and you want to install MKL specifically for BEM++, uncomment
#     the following line

# source=redistributable

#     and set the following variable to the location of the archive
#     file. Example:

# tarball=/home/myname/mkl_linux_intel64.tar.gz

#     You can also customize the list of MKL libraries to link against
#     by editing the following variable. The default setting below
#     (-lmkl_rt) should work for MKL 10.3 or newer. In case of
#     problems use the Intel MKL Link Line Advisor
#     (http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor)
#     to find the setting appropriate for your configuration. You may
#     specify several libraries at once by separating them with
#     semicolons.

# lib=-lmkl_rt

[BLAS]

# If you want to use another BLAS library than Intel MKL, specify its
# location in the following variable. You may specify several paths at
# once by separating them with semicolons. Example:

# lib=/usr/lib/libblas.so

[LAPACK]

# If you want to use another BLAS library than Intel MKL, specify its
# location in the following variable. You may specify several paths at
# once by separating them with semicolons. Example:

# lib=/usr/lib/liblapack.so

[AHMED]

# Uncomment the following line if you have downloaded the AHMED
# library by Mario Bebendorf from
# http://bebendorf.ins.uni-bonn.de/AHMED.html and you want to compile
# and install it along with BEM++. This library enables BEM++ to use
# the adaptive cross approximation algorithm to speed up calculations.

# enable_ahmed=yes

# If you have set enable_ahmed to yes, specify the path to the archive 
# file with the sources of AHMED. Example:

# file_name=/home/myname/AHMED-1.0.tar.gz

