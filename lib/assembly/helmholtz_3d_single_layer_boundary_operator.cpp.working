// Copyright (C) 2011-2012 by the BEM++ Authors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#include "helmholtz_3d_single_layer_potential_operator.hpp"
#include "../fiber/explicit_instantiation.hpp"

#include "../fiber/simple_test_scalar_kernel_trial_integrand_functor.hpp"
#include "../fiber/scalar_function_value_functor.hpp"
#include "../fiber/modified_helmholtz_3d_single_layer_potential_kernel_functor.hpp"

#include "../fiber/standard_kernel_collection.hpp"
#include "../fiber/standard_basis_function_transformation_collection.hpp"
#include "../fiber/standard_test_kernel_trial_integral.hpp"

namespace Bempp
{

template <typename BasisFunctionType>
struct Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::Impl
{
    typedef Fiber::ModifiedHelmholtz3dSingleLayerPotentialKernelFunctor<KernelType>
    KernelFunctor;
    typedef Fiber::ScalarFunctionValueFunctor<CoordinateType>
    TransformationFunctor;
    typedef Fiber::SimpleTestScalarKernelTrialIntegrandFunctor<
    BasisFunctionType, KernelType, ResultType> IntegrandFunctor;

    explicit Impl(KernelType waveNumber) :
        kernels(KernelFunctor(waveNumber / KernelType(0., 1.))),
        transformations(TransformationFunctor()),
        integral(IntegrandFunctor())
    {}

    Fiber::StandardKernelCollection<KernelFunctor> kernels;
    Fiber::StandardBasisFunctionTransformationCollection<TransformationFunctor>
    transformations;
    Fiber::StandardTestKernelTrialIntegral<IntegrandFunctor> integral;
};

template <typename BasisFunctionType>
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
Helmholtz3dSingleLayerPotentialOperator(
        const Space<BasisFunctionType>& testSpace,
        const Space<BasisFunctionType>& trialSpace,
        KernelType waveNumber) :
    Base(testSpace, trialSpace), m_impl(new Impl(waveNumber))
{
}

template <typename BasisFunctionType>
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
Helmholtz3dSingleLayerPotentialOperator(
        const Helmholtz3dSingleLayerPotentialOperator& other) :
    Base(other), m_impl(new Impl(*other.m_impl))
{
}

template <typename BasisFunctionType>
typename Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::KernelType
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
waveNumber() const
{
    return m_impl->kernels.functor().waveNumber();
}

template <typename BasisFunctionType>
void
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
setWaveNumber(KernelType waveNumber)
{
    m_impl->kernels.functor().setWaveNumber(waveNumber / KernelType(0., 1.));
}

template <typename BasisFunctionType>
const typename Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
KernelCollection&
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
kernels() const
{
    return m_impl->kernels;
}

template <typename BasisFunctionType>
const typename Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
BasisFunctionTransformationCollection&
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
testTransformations() const
{
    return m_impl->transformations;
}

template <typename BasisFunctionType>
const typename Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
BasisFunctionTransformationCollection&
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
trialTransformations() const
{
    return m_impl->transformations;
}

template <typename BasisFunctionType>
const typename Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
TestKernelTrialIntegral&
Helmholtz3dSingleLayerPotentialOperator<BasisFunctionType>::
integral() const
{
    return m_impl->integral;
}

FIBER_INSTANTIATE_CLASS_TEMPLATED_ON_BASIS(Helmholtz3dSingleLayerPotentialOperator);

} // namespace Bempp
